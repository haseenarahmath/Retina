import re, os
import plotly.graph_objs as go
import numpy as np
from selenium import webdriver
from splinter import Browser
from plotly.offline import plot
from IPython.display import HTML, display

class Document(object):
    def __init__(self, filename='plot.html', browser_name='chrome'):
        self.layers = []
        self.filename = filename
        plot_file = open(self.filename, 'w+')
        plot_file.close()
        self.filepath = 'file://' + os.path.realpath(self.filename)
        self.browser = Browser(browser_name)
        
    def fovea_plot(self, data, **kwargs):
        plot(data, filename=self.filename, show_link=False, include_plotlyjs=False,
             auto_open=False, **kwargs)
        
        plot_file = open(self.filename, 'r+')
        
        import uuid
        for trace in data:
            trace_id = uuid.uuid4()
            trace['uid'] = trace_id.hex

        self.trace_indices = dict((trace['uid'], index) for (index, trace) in enumerate(data))
        html = plot_file.read()
        insert = html.split('<head>')
        insert[0] += ("<head>"
                      "<script src='https://cdn.plot.ly/plotly-latest.min.js'></script>"
                      "<script src='fovea.js'></script>"
                      "<script src='https://code.jquery.com/jquery-3.1.0.min.js'></script>"
                      "<script src='https://code.jquery.com/ui/1.12.0/jquery-ui.min.js'></script>"
                      "<link rel='stylesheet' type='text/css' href='../api/semantic/dist/semantic.min.css'>"
                      "<link rel='stylesheet' type='text/css' href='fovea_plot.css'>"
                     )
        insert = insert[0] + insert[1]
        insert = insert.split('<body>')
        plot_div = insert[1].split('<div id=')

        # Find the uuid randomly generated by Plotly and replace it with a known ID.
        uuid = re.compile('[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}')
        plot_div[1] = re.sub(uuid, 'graphDiv', plot_div[1])

        insert[0] += ('<body>\n'
                      '    <div class="ui left vertical menu" id="sideMenu">\n'
                      '       <div class="ui accordion">\n'
                      '            <a class="item" id="layerMenu">\n'
                      '                <div class="title">\n'
                      '                    <i class="dropdown icon" id="layerTitle"></i>\n'
                      '                     Layers\n'
                      '                </div>\n'
                      '            </a>\n'
                      '            <a class="item">\n'
                      '                Diagnostic Tracker\n'
                      '            </a>\n'
                      '            <a class="item" id="linkJSON">\n'
                      '                JSON Editor\n'
                      '            </a>\n'
                      '            <div class="item">\n'
                      '                <div class="ui transparent icon input">\n'
                      '                    <input type="text" placeholder="Search Plot Data...">\n'
                      '                    <i class="search icon"></i>\n'
                      '                </div>\n'
                      '            </div>\n'
                      '        </div>\n'
                      '    </div>\n'
                      '    <div class="ui huge text loader" id="graphLoader">\n'
                      '        <p>Loading Plot</p>\n'
                      '    </div>\n'
                     )

        plot_div2 = plot_div[1].split('</div>')
        plot_div[0] += ('<div class="ui dimmer" id="loadDimmer">\n'
                        '   <div id=' + plot_div2[0] + '</div>\n'
                        '   <div id="JSON">\n'
                        '      <h1>JSON Editor</h1>\n'
                        '      <div class="ui selection dropdown" id="jsonDropdown">\n'
                        '           <input type="hidden" name="gender">\n'
                        '           <i class="dropdown icon"></i>\n'
                        '           <div class="default text">Layer</div>\n'
                        '           <div class="menu"></div>\n'
                        '      </div>'
                        '</div>\n'
                       )
        plot_div3 = plot_div2[1].split('</script>')
        plot_div3[0] += ('</script>'
                         '<script src="fovea_plot.js"></script>'
                         '<script src="../api/semantic/dist/semantic.min.js"></script>'
                        )
        html = insert[0] + plot_div[0] +  plot_div3[0] + plot_div3[1] 

        plot_file = open(self.filename, 'w')
        plot_file.write(html)
        plot_file.close()

        return html 

    def view(self):
        self.browser.visit(self.filepath)

    def fovea_iplot(self, data, **kwargs):
        plot_html = self.fovea_plot(data, **kwargs)
        #display(HTML(plot_html))

class Layer2D(object):
    def __init__(self, name, document):
        self.name = name
        self.document = document
        self.browser = self.document.browser
        self.browser.execute_script('graphDiv = document.getElementById("graphDiv")')
        self.browser.execute_script(self.name + ' = new Layer2D("' +
                                             self.name + '", graphDiv);')

    def add_trace(self, trace):
        trace_index = self.document.trace_indices[trace['uid']]
        self.browser.execute_script('_traceToAdd = graphDiv.data[' + 
                                    str(trace_index) + '];') 
        self.browser.execute_script(self.name + '.addTrace(_traceToAdd);')

    def hide(self):
        self.browser.execute_script(self.name + '.hide();')

    def show(self):
        self.browser.execute_script(self.name + '.show();')

    def toggle_display(self):
        self.browser.execute_script(self.name + '.toggleDisplay();')

    def compute_layer_bounds(self):
        bounds = self.browser.evaluate_script(self.name +
                                              '.computeLayerBounds();')
        return bounds

    def compute_figure_bounds(self):
        bounds = self.browser.evaluate_script(self.name +
                                              '.computeAxesBounds();')

    def bound(self):
        self.browser.execute_script(self.name + '.bound();')

    def delete(self):
        self.browser.execute_script(self.name + '.clear();')

    def add_hline(self, y):
        self.browser.execute_script(self.name + '.addHLine('
                                    + str(y) + ');')

    def add_vline(self, x):
        self.browser.execute_script(self.name + '.addVLine('
                                    + str(x) + ');')

class Layer3D(Layer2D):
    def __init__(self, name, document):
        self.name = name
        self.document = document
        self.browser = self.document.browser
        self.browser.execute_script('graphDiv = document.getElementById("graphDiv")')
        self.browser.execute_script(self.name + ' = new Layer3D("' +
                                             self.name + '", graphDiv);')
